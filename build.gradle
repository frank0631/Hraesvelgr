@Grab('com.google.guava:guava:16.0.1')
import static com.google.common.base.CaseFormat.*

//Util for changing cases
String.metaClass.caseFormat = { from, to ->
    from.to(to, delegate)
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://dl.bintray.com/esistegalaber/maven/'
        }
    }
    dependencies {
        classpath 'com.google.guava:guava:16.0.1'
        classpath 'org.absolutegalaber:yeoman-gradle-plugin:0.3.0'
    }
}

repositories {
    mavenCentral()
}

Project thriftProject = project(':Nidhogg');
project(':Nidhogg') {
    apply plugin: 'idea'

    task setProperties() {
        project.ext {
            projectNameJsCase = project.name.caseFormat(UPPER_CAMEL, LOWER_HYPHEN)
            genJavaDir = new File(project.projectDir, 'build/generated-src/main/java')
            genJsDir = new File(project.projectDir, 'build/generated-src/main/js')
            srcThriftDir = new File(project.projectDir, 'src/main/thrift')
            distDir = new File(project.projectDir, 'dist')
        }
    }

    task dist {}
}

Collection ravens = [project(':Muninn'), project(':Huginn')]
configure(ravens) {
    apply plugin: 'idea'
    apply plugin: 'java'
}

project(':Ratatoskr') {
    apply plugin: 'idea'
    apply plugin: 'org.absolutegalaber.yeoman'

    // required
    // yo, bower, git, grunt-cli, ruby, Sass
    // angular-fullstack, angular-thrift-service
    // use yo angular-fullstack appname
}

configure(subprojects - thriftProject) {

    dependencies {
        thriftProject.dist
    }
    //println project(':Nidhogg').ext.getProperties().toString().replaceAll(",", ",\n")
    //println project.getProperties().toString().replaceAll(",", ",\n")

    if (project.plugins.hasPlugin('java')) {

        task setProperties() {
            project.ext {
                //cannot use "${project.build.directory}/generated-source/ as it gets excluded from intelliJ
                generatedThriftSrcDirJava = new File(project.projectDir, 'gen/main/java')
            }
        }

        task getThriftJava(dependsOn: thriftProject.dist) << {
            println 'copying thrift java src to ' + project.name
            copy {
                File zipfile = new File(thriftProject.distDir, 'thriftJava.zip')
                File outputDir = project.generatedThriftSrcDirJava
                from zipTree(zipfile)
                into outputDir
            }
        }

        task addThriftToSrc(dependsOn: getThriftJava) {
            if (!project.generatedThriftSrcDirJava.exists())
                (project.generatedThriftSrcDirJava.mkdirs())

            println 'adding generated thrift ' + relativePath(project.generatedThriftSrcDirJava) + ' to ' + project.name
            sourceSets.main.java {
                srcDir relativePath(project.generatedThriftSrcDirJava)
            }
            idea.module {
                sourceDirs += project.generatedThriftSrcDirJava
                //'build/generated-src/main/java'
                //project.generatedThriftSrcDirJava
            }
        }

        //adding build dependcies
        getThriftJava.finalizedBy(addThriftToSrc)
        build.dependsOn(addThriftToSrc)
    }

    if (project.plugins.hasPlugin('org.absolutegalaber.yeoman')) {

        task setProperties() {
            project.ext {

                bowerName = thriftProject.projectNameJsCase
                generatedThriftSrcDirJs = file(bowerName)
                generatedThriftJSSrcFile = new File(generatedThriftSrcDirJs, bowerName + '.js')
            }
        }

        task getThriftJs(dependsOn: thriftProject.dist) << {
            //println thriftProject.ext.getProperties().toString().replaceAll(",", ",\n")
            println 'copying thrift_bower_lib to ' + project.name
            copy {
                File zipfile = new File(thriftProject.distDir, 'bowerNidhogg.zip')
                File outputDir = generatedThriftSrcDirJs
                from zipTree(zipfile)
                into outputDir
            }
        }

        task bowerLink(type: Exec) {
            println '== linking bower in ' + project.name + ' =='
            String command = ('bower link ./' + relativePath(generatedThriftJSSrcFile) + ' ' + bowerName)
            println command
            commandLine 'bower', 'link', './' + relativePath(generatedThriftJSSrcFile), bowerName
        }
        bowerLink.dependsOn(getThriftJs)

        //adding bower install dependcies
        bowerInstall.dependsOn(getThriftJs)
        bowerInstall.dependsOn(bowerLink)
    }

}

