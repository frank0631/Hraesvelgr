//Docker plugin
// notes for setting up docker remote api locally
// /etc/init/docker.conf
// /etc/default/docker
// DOCKER_OPTS="-H tcp://0.0.0.0:2375"
// set DOCKER_HOST 0.0.0.0:2375

import de.gesellix.gradle.docker.tasks.*

import static groovy.json.JsonOutput.prettyPrint
import static groovy.json.JsonOutput.toJson

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'de.gesellix:gradle-docker-plugin:2015-07-26T22-23-42'
    }
}

ext {
    //localDockerHost = "unix:///var/run/docker.sock"
    localDockerHost = "http://127.0.0.1:2375"
    remoteDockerHost = "http://172.17.42.1:4243"
    imgName = "Huggin"
    containName = "Huggin"
    appPort = 9000
    exposePort = 8080
}

docker {
    dockerHost = localDockerHost
}

task rmImage(type: DockerRmiTask) {
    imageId = imgName
}

task buildImage(type: DockerBuildTask) {
    dependsOn rmImage
    imageName = imgName
    buildContextDirectory = file("./docker/")
}

task stopContainer(type: DockerStopTask) {
    dependsOn buildImage
    containerId = imgName
}

task rmContainer(type: DockerRmTask) {
    dependsOn stopContainer
    containerId = imgName
}

task runContainer(type: DockerRunTask) {
    dependsOn rmContainer
    dockerHost = localDockerHost
    imageName = imgName
    containerName = containName
    containerConfiguration = [
            "ExposedPorts": ["$appPort/tcp": [:]],
            "HostConfig"  : [
                    "WorkingDir"  : "",
                    "Links"       : ["Veorfolnir:Veor"],
                    "PortBindings": ["$appPort/tcp": [["HostPort": "$exposePort"]]]
            ]]
}

task info(type: DockerInfoTask) {
    doLast {
        println prettyPrint(toJson(info))
    }
}

task version(type: DockerVersionTask) {
    doLast {
        println prettyPrint(toJson(version))
    }
}

//Add spring-boot app jar to the docker folder
task copytoDocker(type: Copy, dependsOn: [jar, build]) {
    from jar.archivePath
    into("docker")
}
buildImage.dependsOn(copytoDocker)
