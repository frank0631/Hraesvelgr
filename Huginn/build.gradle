import de.gesellix.gradle.docker.tasks.*
import static groovy.json.JsonOutput.prettyPrint
import static groovy.json.JsonOutput.toJson

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
      classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE")
      classpath("de.gesellix:gradle-docker-plugin:+")
    }
}

plugins {
  id "com.github.ben-manes.versions" version "0.11.3"
  id "de.gesellix.docker" version "2015-07-26T22-23-42"
}

//set docker properties before apply from statement
ext {
    //localDockerHost = "unix:///var/run/docker.sock"
    localDockerHost = "http://127.0.0.1:2375"
    remoteDockerHost = "http://172.17.42.1:4243"
    imgName = "Huggin-fromchild"
    port = 9001
}

apply plugin: 'spring-boot'
apply from: 'docker.gradle'

repositories {
    mavenCentral()
}

springBoot {
    mainClass = 'com.frank0631.huginn.HuginnApplication'
}

bootRepackage {
    mainClass = 'com.frank0631.huginn.HuginnApplication'
}

jar {
    baseName = 'huggin-spring-boot'
    version = '0.1.1'
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.apache.thrift:libthrift:0.9.2'
    compile 'commons-lang:commons-lang:2.6'
    compile 'com.google.guava:guava:r05'

    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("com.h2database:h2")
    compile('org.hibernate:hibernate-core:4.3.9.Final')
    compile('org.hibernate:hibernate-entitymanager:4.3.9.Final')
    compile('com.fasterxml.jackson.core:jackson-core:2.5.3')
    compile('com.fasterxml.jackson.core:jackson-databind:2.5.3')
    compile('org.codehaus.jackson:jackson-core-asl:1.9.13')
    compile('org.codehaus.jackson:jackson-mapper-asl:1.9.13')
    //compile('org.hibernate:hibernate-core:5.0.0.Beta2')

    testCompile("junit:junit")
}

task copytoDocker(type: Copy, dependsOn: [jar,build]) {
    from jar.archivePath
    into("docker")
}
buildImage.dependsOn(copytoDocker)
