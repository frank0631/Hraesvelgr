//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

TCalculatorService_calculate_args = function(args) {
  this.num1 = null;
  this.num2 = null;
  this.op = null;
  if (args) {
    if (args.num1 !== undefined) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined) {
      this.num2 = args.num2;
    }
    if (args.op !== undefined) {
      this.op = args.op;
    }
  }
};
TCalculatorService_calculate_args.prototype = {};
TCalculatorService_calculate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num1 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.num2 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.op = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCalculatorService_calculate_args.prototype.write = function(output) {
  output.writeStructBegin('TCalculatorService_calculate_args');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.I32, 1);
    output.writeI32(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.I32, 2);
    output.writeI32(this.num2);
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCalculatorService_calculate_result = function(args) {
  this.success = null;
  this.divisionByZero = null;
  if (args instanceof TDivisionByZeroException) {
    this.divisionByZero = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.divisionByZero !== undefined) {
      this.divisionByZero = args.divisionByZero;
    }
  }
};
TCalculatorService_calculate_result.prototype = {};
TCalculatorService_calculate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.divisionByZero = new TDivisionByZeroException();
        this.divisionByZero.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCalculatorService_calculate_result.prototype.write = function(output) {
  output.writeStructBegin('TCalculatorService_calculate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.divisionByZero !== null && this.divisionByZero !== undefined) {
    output.writeFieldBegin('divisionByZero', Thrift.Type.STRUCT, 1);
    this.divisionByZero.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCalculatorServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
TCalculatorServiceClient.prototype = {};
TCalculatorServiceClient.prototype.calculate = function(num1, num2, op, callback) {
  if (callback === undefined) {
    this.send_calculate(num1, num2, op);
    return this.recv_calculate();
  } else {
    var postData = this.send_calculate(num1, num2, op, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_calculate);
  }
};

TCalculatorServiceClient.prototype.send_calculate = function(num1, num2, op, callback) {
  this.output.writeMessageBegin('calculate', Thrift.MessageType.CALL, this.seqid);
  var args = new TCalculatorService_calculate_args();
  args.num1 = num1;
  args.num2 = num2;
  args.op = op;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

TCalculatorServiceClient.prototype.recv_calculate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TCalculatorService_calculate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.divisionByZero) {
    throw result.divisionByZero;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'calculate failed: unknown result';
};
//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

Customer = function(args) {
  this.firstName = null;
  this.lastName = null;
  if (args) {
    if (args.firstName !== undefined) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined) {
      this.lastName = args.lastName;
    }
  }
};
Customer.prototype = {};
Customer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Customer.prototype.write = function(output) {
  output.writeStructBegin('Customer');
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 10);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 20);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

TEchoService_echo_args = function(args) {
  this.input = null;
  if (args) {
    if (args.input !== undefined) {
      this.input = args.input;
    }
  }
};
TEchoService_echo_args.prototype = {};
TEchoService_echo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.input = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TEchoService_echo_args.prototype.write = function(output) {
  output.writeStructBegin('TEchoService_echo_args');
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRING, 1);
    output.writeString(this.input);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TEchoService_echo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TEchoService_echo_result.prototype = {};
TEchoService_echo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TEchoService_echo_result.prototype.write = function(output) {
  output.writeStructBegin('TEchoService_echo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TEchoServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
TEchoServiceClient.prototype = {};
TEchoServiceClient.prototype.echo = function(input, callback) {
  if (callback === undefined) {
    this.send_echo(input);
    return this.recv_echo();
  } else {
    var postData = this.send_echo(input, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_echo);
  }
};

TEchoServiceClient.prototype.send_echo = function(input, callback) {
  this.output.writeMessageBegin('echo', Thrift.MessageType.CALL, this.seqid);
  var args = new TEchoService_echo_args();
  args.input = input;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

TEchoServiceClient.prototype.recv_echo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TEchoService_echo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'echo failed: unknown result';
};
//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

BookFormat = {
'ELECTRONIC' : 0,
'HARDCOVER' : 1,
'PAPERBACK' : 2
};
Book = function(args) {
  this.author = null;
  this.title = null;
  this.isbn10 = null;
  this.isbn13 = null;
  this.format = null;
  this.publishDate = null;
  this.language = null;
  this.pages = null;
  this.edition = null;
  if (args) {
    if (args.author !== undefined) {
      this.author = args.author;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.isbn10 !== undefined) {
      this.isbn10 = args.isbn10;
    }
    if (args.isbn13 !== undefined) {
      this.isbn13 = args.isbn13;
    }
    if (args.format !== undefined) {
      this.format = args.format;
    }
    if (args.publishDate !== undefined) {
      this.publishDate = args.publishDate;
    }
    if (args.language !== undefined) {
      this.language = args.language;
    }
    if (args.pages !== undefined) {
      this.pages = args.pages;
    }
    if (args.edition !== undefined) {
      this.edition = args.edition;
    }
  }
};
Book.prototype = {};
Book.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.isbn10 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.isbn13 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.I32) {
        this.format = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.I64) {
        this.publishDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 80:
      if (ftype == Thrift.Type.I64) {
        this.pages = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 90:
      if (ftype == Thrift.Type.I64) {
        this.edition = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Book.prototype.write = function(output) {
  output.writeStructBegin('Book');
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 10);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 20);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.isbn10 !== null && this.isbn10 !== undefined) {
    output.writeFieldBegin('isbn10', Thrift.Type.STRING, 30);
    output.writeString(this.isbn10);
    output.writeFieldEnd();
  }
  if (this.isbn13 !== null && this.isbn13 !== undefined) {
    output.writeFieldBegin('isbn13', Thrift.Type.STRING, 40);
    output.writeString(this.isbn13);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.I32, 50);
    output.writeI32(this.format);
    output.writeFieldEnd();
  }
  if (this.publishDate !== null && this.publishDate !== undefined) {
    output.writeFieldBegin('publishDate', Thrift.Type.I64, 60);
    output.writeI64(this.publishDate);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 70);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.pages !== null && this.pages !== undefined) {
    output.writeFieldBegin('pages', Thrift.Type.I64, 80);
    output.writeI64(this.pages);
    output.writeFieldEnd();
  }
  if (this.edition !== null && this.edition !== undefined) {
    output.writeFieldBegin('edition', Thrift.Type.I64, 90);
    output.writeI64(this.edition);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

TOperation = {
'ADD' : 1,
'SUBTRACT' : 2,
'MULTIPLY' : 3,
'DIVIDE' : 4
};
TDivisionByZeroException = function(args) {
};
Thrift.inherits(TDivisionByZeroException, Thrift.TException);
TDivisionByZeroException.prototype.name = 'TDivisionByZeroException';
TDivisionByZeroException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDivisionByZeroException.prototype.write = function(output) {
  output.writeStructBegin('TDivisionByZeroException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

